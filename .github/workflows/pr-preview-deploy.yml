name: PR Preview Deploy
on:
  workflow_run:
    workflows: ["PR Preview Build"]
    types:
      - completed

jobs:
  deploy-pr-preview:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Download dist
        uses: actions/github-script@v3
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "dist"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/dist.zip', Buffer.from(download.data));
      - name: Download PR number
        uses: actions/github-script@v3
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            var download = await github.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));

      - run: unzip dist.zip -d dist/
      - run: unzip pr.zip

      - name: Generate Surge URL
        uses: actions/github-script@v3
        id: surge-url
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            const issue_number = Number(fs.readFileSync('./NR'));
            return `patternfly-yew-quickstarts-pr-${issue_number}-preview.surge.sh`;
          result-encoding: string
      - name: Install Surge
        run: npm install -g surge
      - name: Deploy to Surge
        run: surge ./dist/ "${{steps.surge-url.outputs.result}}" --token ${{ secrets.SURGE_TOKEN }}

      # - name: Post URL as PR comment
      #   uses: actions/github-script@v3
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       var fs = require('fs');
      #       const issue_number = Number(fs.readFileSync('./NR'));
      #       await github.issues.createComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: issue_number,
      #         body: 'Everything is OK. Thank you for the PR!'
      #       });
      - name: Post URL as PR comment
        uses: mshick/add-pr-comment@v2
        with:
          message: "ðŸš€ Deployed Preview: http://${{steps.surge-url.outputs.result}} âœ¨"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          issue: ${{ steps.surge-url.outputs.result }}
      
      - name: 'Comment on PR'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = Number(fs.readFileSync('./NR'));
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: 'Everything is OK. Thank you for the PR!'
            });
